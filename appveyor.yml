# Tell appveyor to not use msbuild
build: false

environment:
  matrix:
    - PYTHON_VERSION: 2.7
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    - PYTHON_VERSION: 3.5
    - PYTHON_VERSION: 3.6
    - PYTHON_VERSION: 3.7
    #- PYTHON_VERSION: 3.8

platform:
  #- x86
  - x64

init:
  - ECHO %PYTHON_VERSION% - %Platform%
  - SET PYTHON_MAJOR_VERSION=%PYTHON_VERSION:~0,1%
  - IF %PYTHON_MAJOR_VERSION% == 2 SET WIN_SDK_VERSION=v7.0
  - IF %PYTHON_MAJOR_VERSION% == 3 SET WIN_SDK_VERSION=v7.1
  - ECHO Configuring Windows SDK %WIN_SDK_VERSION% for Python %PYTHON_MAJOR_VERSION% on an %Platform% platform
  - SET WIN_SDK_ROOT=C:\\Program Files\\Microsoft SDKs\\Windows
  - "%WIN_SDK_ROOT%\\%WIN_SDK_VERSION%\\Setup\\WindowsSdkVer.exe" -q -version:%WIN_SDK_VERSION%
  - "%WIN_SDK_ROOT%\\%WIN_SDK_VERSION%\\Bin\SetEnv.cmd" /%Platform% /release

install:
  - git submodule update --init --recursive
  - IF "%Platform%"=="x86" ( CALL "C:\Miniconda37\Scripts\activate.bat" )
  - IF "%Platform%"=="x64" ( CALL "C:\Miniconda37-x64\Scripts\activate.bat" )
  - conda create -y -n condaenv python=%PYTHON_VERSION% cython pip pywin32 requests jinja2 pyyaml pycrypto wheel
  - conda activate condaenv
  - IF "%PYTHON_VERSION%"=="2.7" ( conda install -y ndg-httpsclient )
  - conda deactivate

build_script:
  - CD wrappers\Python
  - IF "%Platform%"=="x86" ( CALL "C:\Miniconda37\Scripts\activate.bat" )
  - IF "%Platform%"=="x64" ( CALL "C:\Miniconda37-x64\Scripts\activate.bat" )
  - conda activate condaenv
  - python generate_meta_info.py
  - IF "%Platform%"=="x86" IF "%PYTHON_VERSION%"=="2.7" ( python setup.py bdist_wheel --dist-dir ../../install_root/Python bdist_wininst --dist-dir ../../install_root/Python --cmake-compiler vc9 --cmake-bitness 32 )
  - IF "%Platform%"=="x64" IF "%PYTHON_VERSION%"=="2.7" ( python setup.py bdist_wheel --dist-dir ../../install_root/Python bdist_wininst --dist-dir ../../install_root/Python --cmake-compiler vc9 --cmake-bitness 64 )
  - IF NOT "%PYTHON_VERSION%"=="2.7"                    ( python setup.py bdist_wheel --dist-dir ../../install_root/Python bdist_wininst --dist-dir ../../install_root/Python )
  - python setup.py clean
  - conda deactivate


# install:
  # - git submodule update --init --recursive
  # - ps: |
      # If       ($env:Platform -eq "x86") {
        # & "C:\Miniconda37\Scripts\activate.bat"
      # } ElseIf ($env:Platform -eq "x64") {
        # & "C:\Miniconda37-x64\Scripts\activate.bat"
      # } Else {
        # Write-Output "Platform is not defined properly."
      # }
      # & "conda" create -y -n condaenv python=%PYTHON% cython pip pywin32 requests jinja2 pyyaml pycrypto wheel
  # #- conda create -y -n condaenv python=%PYTHON% cython pip pywin32 requests jinja2 pyyaml pycrypto wheel
  # #- conda activate condaenv
  # #- ps: if($env:PYTHON -eq "2.7"){conda install -y ndg-httpsclient}

# build_script:
  # - CD wrappers\Python
  # - ps: |
      # If       ($env:Platform -eq "x86") {
        # & "C:\Miniconda37\Scripts\activate.bat"
      # } ElseIf ($env:Platform -eq "x64") {
        # & "C:\Miniconda37-x64\Scripts\activate.bat"
      # } Else {
        # Write-Output "Platform is not defined properly."
      # }
      # & "python" generate_meta_info.py
      # If       ($env:PYTHON -eq "2.7" -and $env:Platform -eq "x64") {
        # & "python" setup.py bdist_wheel --dist-dir ../../install_root/Python bdist_wininst --dist-dir ../../install_root/Python --cmake-compiler vc9 --cmake-bitness 64
      # } ElseIf ($env:PYTHON -eq "2.7" -and $env:Platform -eq "x86") {
        # & "python" setup.py bdist_wheel --dist-dir ../../install_root/Python bdist_wininst --dist-dir ../../install_root/Python --cmake-compiler vc9 --cmake-bitness 32
      # } Else {
        # & "python" setup.py bdist_wheel --dist-dir ../../install_root/Python bdist_wininst --dist-dir ../../install_root/Python
      # }
      # & "python" setup.py clean

# build_script:
  # - cmd: |
      # "%PYTHON%/python.exe" -m pip install --upgrade pip
      # "%PYTHON%/python.exe" -m pip install --upgrade setuptools wheel numpy
      # cd src
      # "%PYTHON%/python.exe" setup.py build
      # copy ..\bin\*.* ..\wheel\dbr\
      # cd build\lib.win-*\
      # copy *.* ..\..\..\wheel\dbr\
      # cd ..\..\..\wheel\
      # "%PYTHON%/python.exe" setup.py bdist_wheel
# artifacts:
  # - path: wrappers\Python\wheel\dist\*.whl
    # name: wheels

# deploy_script:
  # - ps: |
      # if($env:APPVEYOR_REPO_TAG -eq 'true') {
        # Write-Output ("Uploading " + $env:APPVEYOR_REPO_TAG_NAME + " to PyPI...")
        # &"${Env:PYTHON}/python.exe" -m pip install twine
        # &"${Env:PYTHON}/python.exe" -m twine upload -u ${Env:USER} -p ${Env:PASS} --skip-existing dist/*.whl
      # } else {
        # Write-Output "No tag for deployment"
      # }