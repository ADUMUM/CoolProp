
notifications:
  email:
    on_success: never
    on_failure: change

git:
  depth: 5
  #submodules_depth: 100

language:
  - cpp

#os: linux
#dist: trusty
#
#compiler:
#  - clang
#  - gcc
#
#addons:
#  apt:
#    sources:
#    - ubuntu-toolchain-r-test
#    - llvm-toolchain-trusty
#    packages:
#    - cmake
#    - gcc-6
#    - g++-6
#    - clang-3.7

matrix:
  include:
    # Use this code to enable certain debug builds - for example for pull requests
    #- compiler: clang
    #  branches:
    #    only:
    #      - issues/1820
    #  before_script:
    #    - cmake --version
    #    - echo "$CXX" && "$CXX" -v
    #    - mkdir -p build && pushd build
    #    - cmake .. -DCMAKE_BUILD_TYPE=Release -DCOOLPROP_MY_MAIN=dev/Tickets/1820.cpp -DCMAKE_CXX_STANDARD=11
    #    - popd
    #  script:     
    #    - cmake --build build --config Release
    #    - ./build/Main
    #
    - os: windows
      env:
        - PYTHON_VERSION=3.6
      branches:
        except:
          - coverity_scan
      before_script:
        - cmake --version
        #- wget https://repo.continuum.io/miniconda/Miniconda2-latest-Windows-x86.exe -O miniconda.sh;
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe -O miniconda.exe
        - ./miniconda /S /D=C:\\Miniconda
        - export PATH=C:\\Miniconda\\Scripts:$PATH
        - conda create -y -n condaenv python=${PYTHON_VERSION} cython pip requests jinja2 pyyaml wheel
      script:
        - source activate condaenv
        - pushd wrappers\Python
        - python generate_meta_info.py
        - python setup.py bdist_wheel --dist-dir ../../install_root/Python bdist_wininst --dist-dir ../../install_root/Python
        - python setup.py clean
        - conda deactivate
        - ls -lh ../../install_root/Python
        - popd
      #deploy:
      #  provider: bintray
      #  file: "Path to a descriptor file, containing information for the Bintray upload"
      #  user: "Bintray user"
      #  key: "Bintray API key"
      #  passphrase: "Optional. In case a passphrase is configured on Bintray and GPG signing is used"
      #  dry-run: "Optional. If true, skips sending requests to Bintray. Useful for testing your configuration"
    - os: linux
      dist: bionic
      compiler: gcc
      branches:
        except:
          - coverity_scan
      before_script:
        - cmake --version
        - echo "$CXX" && "$CXX" -v
        - mkdir -p build && pushd build
        - cmake .. -DCMAKE_BUILD_TYPE=Release -DCOOLPROP_SHARED_LIBRARY=ON
        - popd
      script:     
        - cmake --build build --config Release
    - os: linux
      dist: bionic
      compiler: clang
      branches:
        except:
          - coverity_scan
      before_script:
        - cmake --version
        - echo "$CXX" && "$CXX" -v
        - mkdir -p build && pushd build
        - cmake .. -DCMAKE_BUILD_TYPE=Release -DCOOLPROP_SHARED_LIBRARY=ON
        - popd
      script:     
        - cmake --build build --config Release
    - os: osx
      #osx_image: xcode8.3 #  Xcode 8.3   OS X 10.12
      branches:
        except:
          - coverity_scan
      before_script:
        - cmake --version
        - echo "$CXX" && "$CXX" -v
        - mkdir -p build && pushd build
        - cmake .. -DCMAKE_BUILD_TYPE=Release -DCOOLPROP_SHARED_LIBRARY=ON
        - popd
      script:     
        - cmake --build build --config Release
    - os: linux 
      dist: bionic
      branches:
        only:
          - coverity_scan
#      before_install:
#        - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
      addons:
        coverity_scan:
          project:
            name: "CoolProp/CoolProp"
            description: "Build submitted via Travis CI"
          notification_email: jowr@ipu.dk
          build_command_prepend: "cmake . -DCMAKE_BUILD_TYPE=Release -DCOOLPROP_SHARED_LIBRARY=ON"
          build_command: "cmake --build . --config Release"
          branch_pattern: coverity_scan
      before_script: cmake . -DCMAKE_BUILD_TYPE=Release -DCOOLPROP_SHARED_LIBRARY=ON
      script: cmake --build . --config Release
#          build_command_prepend: "cmake . -DCOOLPROP_MY_MAIN=dev/coverity/main.cxx"
#          build_command: "cmake --build . --target Main"
#          branch_pattern: coverity_scan
#      before_script: cmake . -DCOOLPROP_MY_MAIN=dev/coverity/main.cxx
#      script: cmake --build . --target Main

#branches:
#  only:
#    - master
#    - release
#    - coverity_scan
#    - travis_integration
#  # Build all branches
#  #  - /.*/ 

env:
  global:
    - secure: "XGfICTnfFv9xpVDBbNwJIkXV0OZCAcOT46aeFYmODm3jl+ya60k0C91G9zlZ9fEYiQwAEBTO2Y/Ge0AMaoFqtu3H3vu7S5JjAbpMV3ZRDJqampScy550yPpziOuxvB6h23PZRfLOBVEsUGHnCO5rLb20iPM94XsHSBL3Smn2o9c="

#install:
#  - if [ "$CXX" = "g++" ]; then export CXX="g++-6" CC="gcc-6"; fi
#  - if [ "$CXX" = "clang++" ]; then export CXX="clang++-3.7" CC="clang-3.7"; fi

# before_script:
  # # Check compiler and cmake versions
  # - cmake --version; gcc -v; clang -v
  # - echo "$CXX" && "$CXX" -v
  # # Run your build commands next
  # - mkdir build && pushd build
  # - echo "${TRAVIS_BUILD_DIR}"
  # - cmake .. -DCMAKE_BUILD_TYPE=Release # Same as "${TRAVIS_BUILD_DIR}"
  # - popd

# script:     
  # - cmake --build build --config Release

  
  
